{"version":3,"sources":["ng://take-while-alive/lib/take-while-alive.ts"],"names":["isAlivePropName","takeWhileAlive","component","takeWhile","AutoUnsubscribe","target","proto","prototype","originalNgOnDestroy","ngOnDestroy","apply","this"],"mappings":"uRAGA,IAAMA,EAAkB,sCAExB,SAAAC,EAAkCC,GAC9B,OAAOC,EAAAA,UAAa,WAAM,OAAAD,EAAUF,wBAIxC,SAAAI,IACI,OAAO,SAAAC,GACH,IAAMC,EAAQD,EAAOE,UACfC,EAAgCF,EAAMG,YAE5CH,EAAMN,IAAmB,EACzBK,EAAOE,UAAUE,YAAc,WACvBD,GACAA,EAAoBE,MAAMC,MAE9BA,KAAKX,IAAmB","sourcesContent":["import { MonoTypeOperatorFunction } from 'rxjs';\nimport { takeWhile } from 'rxjs/operators';\n\nconst isAlivePropName = '__isComponentAlive';\n\nexport function takeWhileAlive<T>(component: any): MonoTypeOperatorFunction<T> {\n    return takeWhile<T>(() => component[isAlivePropName]);\n}\n\n\nexport function AutoUnsubscribe(): ClassDecorator {\n    return target => {\n        const proto = target.prototype;\n        const originalNgOnDestroy: Function = proto.ngOnDestroy;\n\n        proto[isAlivePropName] = true;\n        target.prototype.ngOnDestroy = function () {\n            if (originalNgOnDestroy) {\n                originalNgOnDestroy.apply(this);\n            }\n            this[isAlivePropName] = false;\n        };\n    };\n}\n"]}