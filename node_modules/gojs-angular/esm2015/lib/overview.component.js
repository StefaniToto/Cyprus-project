/**
 * @fileoverview added by tsickle
 * Generated from: lib/overview.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, Input, NgZone, ViewChild } from '@angular/core';
import * as go from 'gojs';
export class OverviewComponent {
    /**
     * @param {?} zone
     */
    constructor(zone) {
        this.zone = zone;
        // The Diagram to observe with the Overview
        this.observedDiagram = null;
        // The Overview itself
        this.overview = null;
    }
    /**
     * Initialize the overview
     * @return {?}
     */
    ngAfterViewInit() {
        if (!this.overviewDiv)
            return;
        if (this.initOverview) {
            this.overview = this.initOverview();
        }
        else {
            this.overview = new go.Overview();
            this.overview.contentAlignment = go.Spot.Center;
        }
        // This bit of code makes sure the mousemove event listeners on the canvas are run outside NgZone
        // This makes it so change detection isn't triggered every time the mouse is moved inside the canvas, greatly improving performance
        // If some state-altering behavior must happen on a mousemove event inside the overview,
        // you will have to using zone.run() to make sure that event triggers angular change detection
        this.overview.addEventListener = (/**
         * @param {?} DOMElement
         * @param {?} name
         * @param {?} listener
         * @param {?} capture
         * @return {?}
         */
        (DOMElement, name, listener, capture) => {
            /** @type {?} */
            const superAddEventListener = go.Diagram.prototype.addEventListener;
            if (name === 'mousemove') {
                this.zone.runOutsideAngular((/**
                 * @return {?}
                 */
                () => superAddEventListener.call(this, DOMElement, name, listener, capture)));
            }
            else {
                this.zone.run((/**
                 * @return {?}
                 */
                () => {
                    superAddEventListener.call(this, DOMElement, name, listener, capture);
                }));
            }
        });
        this.overview.div = this.overviewDiv.nativeElement;
    }
    /**
     * Only update when the observed diagram changes
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (!this.overview)
            return;
        if (changes && changes.observedDiagram && changes.observedDiagram.currentValue !== changes.observedDiagram.previousValue) {
            this.overview.observed = changes.observedDiagram.currentValue;
        }
    }
}
OverviewComponent.decorators = [
    { type: Component, args: [{
                selector: 'gojs-overview',
                template: '<div #ngOverview [className]=divClassName></div>'
            }] }
];
/** @nocollapse */
OverviewComponent.ctorParameters = () => [
    { type: NgZone }
];
OverviewComponent.propDecorators = {
    initOverview: [{ type: Input }],
    divClassName: [{ type: Input }],
    observedDiagram: [{ type: Input }],
    overviewDiv: [{ type: ViewChild, args: ['ngOverview', { static: true },] }]
};
if (false) {
    /** @type {?} */
    OverviewComponent.prototype.initOverview;
    /** @type {?} */
    OverviewComponent.prototype.divClassName;
    /** @type {?} */
    OverviewComponent.prototype.observedDiagram;
    /** @type {?} */
    OverviewComponent.prototype.overviewDiv;
    /** @type {?} */
    OverviewComponent.prototype.overview;
    /** @type {?} */
    OverviewComponent.prototype.zone;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3ZlcnZpZXcuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvZ29qcy1hbmd1bGFyL3NyYy9saWIvb3ZlcnZpZXcuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBaUIsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQy9GLE9BQU8sS0FBSyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBTTNCLE1BQU0sT0FBTyxpQkFBaUI7Ozs7SUFnQjVCLFlBQW1CLElBQVk7UUFBWixTQUFJLEdBQUosSUFBSSxDQUFROztRQVBmLG9CQUFlLEdBQWUsSUFBSSxDQUFDOztRQUs1QyxhQUFRLEdBQXVCLElBQUksQ0FBQztJQUVSLENBQUM7Ozs7O0lBSzdCLGVBQWU7UUFDcEIsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXO1lBQUUsT0FBTztRQUM5QixJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDckIsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7U0FDckM7YUFBTTtZQUNMLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDbEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztTQUNqRDtRQUVELGlHQUFpRztRQUNqRyxtSUFBbUk7UUFDbkksd0ZBQXdGO1FBQ3hGLDhGQUE4RjtRQUM5RixJQUFJLENBQUMsUUFBUSxDQUFDLGdCQUFnQjs7Ozs7OztRQUFHLENBQUMsVUFBdUMsRUFBRSxJQUFZLEVBQUUsUUFBYSxFQUFFLE9BQWdCLEVBQUUsRUFBRTs7a0JBQ3BILHFCQUFxQixHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLGdCQUFnQjtZQUNuRSxJQUFJLElBQUksS0FBSyxXQUFXLEVBQUU7Z0JBQ3hCLElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCOzs7Z0JBQUMsR0FBRyxFQUFFLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxVQUFVLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxPQUFPLENBQUMsRUFBQyxDQUFDO2FBQzFHO2lCQUFNO2dCQUNMLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRzs7O2dCQUFDLEdBQUcsRUFBRTtvQkFDakIscUJBQXFCLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxVQUFVLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxPQUFPLENBQUMsQ0FBQztnQkFDeEUsQ0FBQyxFQUFDLENBQUM7YUFDSjtRQUNILENBQUMsQ0FBQSxDQUFDO1FBRUYsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQUM7SUFDckQsQ0FBQzs7Ozs7O0lBTU0sV0FBVyxDQUFDLE9BQXNCO1FBQ3ZDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUTtZQUFFLE9BQU87UUFDM0IsSUFBSSxPQUFPLElBQUksT0FBTyxDQUFDLGVBQWUsSUFBSSxPQUFPLENBQUMsZUFBZSxDQUFDLFlBQVksS0FBSyxPQUFPLENBQUMsZUFBZSxDQUFDLGFBQWEsRUFBRTtZQUN4SCxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUMsZUFBZSxDQUFDLFlBQVksQ0FBQztTQUMvRDtJQUNILENBQUM7OztZQTdERixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLGVBQWU7Z0JBQ3pCLFFBQVEsRUFBRSxrREFBa0Q7YUFDN0Q7Ozs7WUFOc0MsTUFBTTs7OzJCQVUxQyxLQUFLOzJCQUdMLEtBQUs7OEJBR0wsS0FBSzswQkFFTCxTQUFTLFNBQUMsWUFBWSxFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRTs7OztJQVJ6Qyx5Q0FBZ0Q7O0lBR2hELHlDQUFxQzs7SUFHckMsNENBQW1EOztJQUVuRCx3Q0FBMEU7O0lBRzFFLHFDQUEyQzs7SUFFL0IsaUNBQW1CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBJbnB1dCwgTmdab25lLCBTaW1wbGVDaGFuZ2VzLCBWaWV3Q2hpbGQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0ICogYXMgZ28gZnJvbSAnZ29qcyc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ2dvanMtb3ZlcnZpZXcnLFxyXG4gIHRlbXBsYXRlOiAnPGRpdiAjbmdPdmVydmlldyBbY2xhc3NOYW1lXT1kaXZDbGFzc05hbWU+PC9kaXY+J1xyXG59KVxyXG5leHBvcnQgY2xhc3MgT3ZlcnZpZXdDb21wb25lbnQge1xyXG5cclxuICAvLyBUaGUgZnVuY3Rpb24gdXNlZCB0byBpbml0aWFsaXplIHRoZSBPdmVydmlld1xyXG4gIEBJbnB1dCgpIHB1YmxpYyBpbml0T3ZlcnZpZXc6ICgpID0+IGdvLk92ZXJ2aWV3O1xyXG5cclxuICAvLyBPdmVydmlldyBkaXYgY2xhc3MgbmFtZS4gVXNlIHRoaXMgbmFtZSB0byBzdHlsZSB5b3VyIE92ZXJ2aWV3IGluIENTU1xyXG4gIEBJbnB1dCgpIHB1YmxpYyBkaXZDbGFzc05hbWU6IHN0cmluZztcclxuXHJcbiAgLy8gVGhlIERpYWdyYW0gdG8gb2JzZXJ2ZSB3aXRoIHRoZSBPdmVydmlld1xyXG4gIEBJbnB1dCgpIHB1YmxpYyBvYnNlcnZlZERpYWdyYW06IGdvLkRpYWdyYW0gPSBudWxsO1xyXG5cclxuICBAVmlld0NoaWxkKCduZ092ZXJ2aWV3JywgeyBzdGF0aWM6IHRydWUgfSkgcHVibGljIG92ZXJ2aWV3RGl2OiBFbGVtZW50UmVmO1xyXG5cclxuICAvLyBUaGUgT3ZlcnZpZXcgaXRzZWxmXHJcbiAgcHVibGljIG92ZXJ2aWV3OiBnby5PdmVydmlldyB8IG51bGwgPSBudWxsO1xyXG5cclxuICBjb25zdHJ1Y3RvcihwdWJsaWMgem9uZTogTmdab25lKSB7IH1cclxuXHJcbiAgLyoqXHJcbiAgICogSW5pdGlhbGl6ZSB0aGUgb3ZlcnZpZXdcclxuICAgKi9cclxuICBwdWJsaWMgbmdBZnRlclZpZXdJbml0KCkge1xyXG4gICAgaWYgKCF0aGlzLm92ZXJ2aWV3RGl2KSByZXR1cm47XHJcbiAgICBpZiAodGhpcy5pbml0T3ZlcnZpZXcpIHtcclxuICAgICAgdGhpcy5vdmVydmlldyA9IHRoaXMuaW5pdE92ZXJ2aWV3KCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLm92ZXJ2aWV3ID0gbmV3IGdvLk92ZXJ2aWV3KCk7XHJcbiAgICAgIHRoaXMub3ZlcnZpZXcuY29udGVudEFsaWdubWVudCA9IGdvLlNwb3QuQ2VudGVyO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFRoaXMgYml0IG9mIGNvZGUgbWFrZXMgc3VyZSB0aGUgbW91c2Vtb3ZlIGV2ZW50IGxpc3RlbmVycyBvbiB0aGUgY2FudmFzIGFyZSBydW4gb3V0c2lkZSBOZ1pvbmVcclxuICAgIC8vIFRoaXMgbWFrZXMgaXQgc28gY2hhbmdlIGRldGVjdGlvbiBpc24ndCB0cmlnZ2VyZWQgZXZlcnkgdGltZSB0aGUgbW91c2UgaXMgbW92ZWQgaW5zaWRlIHRoZSBjYW52YXMsIGdyZWF0bHkgaW1wcm92aW5nIHBlcmZvcm1hbmNlXHJcbiAgICAvLyBJZiBzb21lIHN0YXRlLWFsdGVyaW5nIGJlaGF2aW9yIG11c3QgaGFwcGVuIG9uIGEgbW91c2Vtb3ZlIGV2ZW50IGluc2lkZSB0aGUgb3ZlcnZpZXcsXHJcbiAgICAvLyB5b3Ugd2lsbCBoYXZlIHRvIHVzaW5nIHpvbmUucnVuKCkgdG8gbWFrZSBzdXJlIHRoYXQgZXZlbnQgdHJpZ2dlcnMgYW5ndWxhciBjaGFuZ2UgZGV0ZWN0aW9uXHJcbiAgICB0aGlzLm92ZXJ2aWV3LmFkZEV2ZW50TGlzdGVuZXIgPSAoRE9NRWxlbWVudDogRWxlbWVudCB8IFdpbmRvdyB8IERvY3VtZW50LCBuYW1lOiBzdHJpbmcsIGxpc3RlbmVyOiBhbnksIGNhcHR1cmU6IGJvb2xlYW4pID0+IHtcclxuICAgICAgY29uc3Qgc3VwZXJBZGRFdmVudExpc3RlbmVyID0gZ28uRGlhZ3JhbS5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lcjtcclxuICAgICAgaWYgKG5hbWUgPT09ICdtb3VzZW1vdmUnKSB7XHJcbiAgICAgICAgdGhpcy56b25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHN1cGVyQWRkRXZlbnRMaXN0ZW5lci5jYWxsKHRoaXMsIERPTUVsZW1lbnQsIG5hbWUsIGxpc3RlbmVyLCBjYXB0dXJlKSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhpcy56b25lLnJ1bigoKSA9PiB7XHJcbiAgICAgICAgICBzdXBlckFkZEV2ZW50TGlzdGVuZXIuY2FsbCh0aGlzLCBET01FbGVtZW50LCBuYW1lLCBsaXN0ZW5lciwgY2FwdHVyZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5vdmVydmlldy5kaXYgPSB0aGlzLm92ZXJ2aWV3RGl2Lm5hdGl2ZUVsZW1lbnQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBPbmx5IHVwZGF0ZSB3aGVuIHRoZSBvYnNlcnZlZCBkaWFncmFtIGNoYW5nZXNcclxuICAgKiBAcGFyYW0gY2hhbmdlc1xyXG4gICAqL1xyXG4gIHB1YmxpYyBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XHJcbiAgICBpZiAoIXRoaXMub3ZlcnZpZXcpIHJldHVybjtcclxuICAgIGlmIChjaGFuZ2VzICYmIGNoYW5nZXMub2JzZXJ2ZWREaWFncmFtICYmIGNoYW5nZXMub2JzZXJ2ZWREaWFncmFtLmN1cnJlbnRWYWx1ZSAhPT0gY2hhbmdlcy5vYnNlcnZlZERpYWdyYW0ucHJldmlvdXNWYWx1ZSkge1xyXG4gICAgICB0aGlzLm92ZXJ2aWV3Lm9ic2VydmVkID0gY2hhbmdlcy5vYnNlcnZlZERpYWdyYW0uY3VycmVudFZhbHVlO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbn1cclxuIl19