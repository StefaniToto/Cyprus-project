{"version":3,"sources":["../../../projects/gojs-angular/src/lib/diagram.component.ts","../../../projects/gojs-angular/src/lib/palette.component.ts","../../../projects/gojs-angular/src/lib/overview.component.ts","../../../projects/gojs-angular/src/lib/gojs-angular.module.ts","../../../projects/gojs-angular/src/lib/data-sync.service.ts"],"names":["DiagramComponent","_differs","_kvdiffers","zone","this","linkDataArray","modelData","modelChangedListener","skipsDiagramUpdate","modelChange","EventEmitter","diagram","_ndaDiffer","find","create","_ldaDiffer","prototype","ngOnInit","_mdDiffer","ngAfterViewInit","_this","initDiagram","addEventListener","DOMElement","name","listener","capture","superAddEventListener","go.Diagram","runOutsideAngular","call","run","divRef","diagramDiv","nativeElement","div","delayInitialization","model","commit","m","mergeNodeDataArray","cloneDeep","nodeDataArray","go.GraphLinksModel","mergeLinkDataArray","assignAllDataProperties","e","isTransactionFinished","dataChanges","toIncrementalData","emit","addModelChangedListener","ngDoCheck","nodeDiffs","diff","linkDiffs","dc","removeChangedListener","startTransaction","mergeChanges","commitTransaction","addChangedListener","kvchanges","str","forEachAddedItem","r","addNodeData","currentValue","addLinkData","forEachRemovedItem","node","findNodesByExample","previousValue","first","remove","link","findLinksByExample","forEachChangedItem","compareObjs","obj1","obj2","p","hasOwnProperty","data","Component","args","selector","template","IterableDiffers","KeyValueDiffers","NgZone","Input","Output","ViewChild","static","PaletteComponent","palette","paletteDiv","initPalette","nodeDataArrayChanges","linkDataArrayChanges","modelDataChanges","updateFromAppData","OverviewComponent","observedDiagram","overview","overviewDiv","initOverview","go.Overview","contentAlignment","go.Spot","Center","ngOnChanges","changes","observed","NgModule","declarations","imports","exports","DataSyncService","syncNodeData","nodeData","modifiedNodeData","insertedNodeKeys","removedNodeKeys","modifiedNodesMap","go.Map","forEach","nd","set","key","i","length","get","push","filter","includes","syncLinkData","linkData","modifiedLinkData","insertedLinkKeys","removedLinkKeys","modifiedLinksMap","ld","syncModelData","Injectable","providedIn"],"mappings":"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","sourcesContent":["import { Component, ElementRef, EventEmitter, Input, IterableDiffers, IterableDiffer, KeyValueDiffer, KeyValueDiffers, NgZone, Output, ViewChild, KeyValueChangeRecord } from '@angular/core';\r\nimport * as go from 'gojs';\r\nimport { dashCaseToCamelCase } from '@angular/compiler/src/util';\r\n\r\n@Component({\r\n  selector: 'gojs-diagram',\r\n  template: '<div #ngDiagram [className]=divClassName></div>'\r\n})\r\nexport class DiagramComponent {\r\n\r\n  /**\r\n   * Diagram initialization function. Returns a go.Diagram.\r\n   * Do not initialize model data in this function.\r\n   */\r\n  @Input() public initDiagram: () => go.Diagram;\r\n\r\n  // Node data for diagram\r\n  @Input() public nodeDataArray: Array<go.ObjectData>;\r\n\r\n  // Link data for diagram\r\n  @Input() public linkDataArray: Array<go.ObjectData> = null; // optional\r\n\r\n  // Model data for diagram\r\n  @Input() public modelData: go.ObjectData = null; // optional\r\n\r\n  // Diagram div class name. Use this name to style your diagram in CSS\r\n  @Input() public divClassName: string;\r\n\r\n  // model changed listener function for diagram\r\n  @Input() public modelChangedListener: (e: go.ChangedEvent) => void | null = null;\r\n\r\n  @Input()\r\n  public skipsDiagramUpdate: boolean = false;\r\n\r\n  // event emitter -- fires when diagram model changes. Capture this emitted event in parent component\r\n  @Output() public modelChange: EventEmitter<go.IncrementalData> = new EventEmitter<go.IncrementalData>();\r\n\r\n  @ViewChild('ngDiagram', { static: true }) public diagramDiv: ElementRef;\r\n  public diagram: go.Diagram = null;\r\n\r\n  // differs for array inputs (node / link data arrays)\r\n  private _ndaDiffer: KeyValueDiffer<string, any>;\r\n  private _ldaDiffer: KeyValueDiffer<string, any>;\r\n  // differ for modelData object\r\n  private _mdDiffer: KeyValueDiffer<string, any>;\r\n\r\n\r\n  constructor(private _differs: IterableDiffers, private _kvdiffers: KeyValueDiffers, public zone: NgZone) {\r\n    // differs used to check if there have been changed to the array @Inputs\r\n    // without them, changes to the input arrays won't register in ngOnChanges,\r\n    // since the array reference itself may be the same\r\n    this._ndaDiffer = this._kvdiffers.find([]).create();\r\n    this._ldaDiffer = this._kvdiffers.find([]).create();\r\n\r\n    // also watch if model data changes; this differ must be initialized in ngOnInit\r\n  }\r\n\r\n  public ngOnInit() {\r\n    // initialize the differ that listens for changes to modelData object\r\n    if (this.modelData) {\r\n      this._mdDiffer = this._kvdiffers.find(this.modelData).create();\r\n    }\r\n  } // end ngOnInit\r\n\r\n  /**\r\n   * Initializes diagram / model after view init\r\n   */\r\n  public ngAfterViewInit() {\r\n    this.diagram = this.initDiagram();\r\n\r\n    // This bit of code makes sure the mousemove event listeners on the canvas are run outside NgZone\r\n    // This makes it so change detection isn't triggered every time the mouse is moved inside the canvas, greatly improving performance\r\n    // If some state-altering behavior must happen on a mousemove event inside the diagram,\r\n    // you will have to using zone.run() to make sure that event triggers angular change detection\r\n    this.diagram.addEventListener = (DOMElement: Element | Window | Document, name: string, listener: any, capture: boolean) => {\r\n      const superAddEventListener = go.Diagram.prototype.addEventListener;\r\n      if (name === 'mousemove') {\r\n        this.zone.runOutsideAngular(() => superAddEventListener.call(this, DOMElement, name, listener, capture));\r\n      } else {\r\n        this.zone.run(() => {\r\n          superAddEventListener.call(this, DOMElement, name, listener, capture);\r\n        });\r\n      }\r\n    };\r\n\r\n    // assign the Diagram's div, which (among many other things) will attach a bunch of listeners to the canvas,\r\n    // using the overridden addEventListener function above\r\n    const divRef = this.diagramDiv.nativeElement;\r\n    if (divRef === null) return;\r\n    this.diagram.div = divRef;\r\n\r\n    // initialize the Diagram's model\r\n    this.diagram.delayInitialization(() => {\r\n      const model = this.diagram.model;\r\n      model.commit((m: go.Model) => {\r\n        m.mergeNodeDataArray(m.cloneDeep(this.nodeDataArray));\r\n        if (this.linkDataArray && m instanceof go.GraphLinksModel) {\r\n          m.mergeLinkDataArray(m.cloneDeep(this.linkDataArray));\r\n        }\r\n        if (this.modelData) {\r\n          m.assignAllDataProperties(m.modelData, this.modelData);\r\n        }\r\n      }, null);\r\n    });\r\n\r\n    // initializer listener\r\n    this.modelChangedListener = (e: go.ChangedEvent) => {\r\n      if (e.isTransactionFinished) {\r\n        // this must be done within a NgZone.run block, so changes are detected in the parent component\r\n        this.zone.run(() => {\r\n          const dataChanges = e.model!.toIncrementalData(e);\r\n          this.modelChange.emit(dataChanges);\r\n        });\r\n      }\r\n    };\r\n    this.diagram.addModelChangedListener(this.modelChangedListener);\r\n\r\n  } // end ngAfterViewInit\r\n\r\n\r\n\r\n  /**\r\n   * Always be checking if array Input data has changed (node and link data arrays)\r\n   */\r\n  public ngDoCheck() {\r\n\r\n\r\n    \r\n    \r\n    if (!this.diagram) return;\r\n    if (!this.diagram.model) return;\r\n\r\n    // these need to be run each check, even if no merging happens\r\n    // otherwise, they will detect all diffs that happened since last time skipsDiagram was false,\r\n    // such as remove ops that happened in GoJS when skipsDiagram = true, \r\n    // and then realllllly bad stuff happens (deleting random nodes, updating the wrong Parts)\r\n    // Angular differs are a lot of fun\r\n    var nodeDiffs = this._ndaDiffer.diff(this.nodeDataArray);\r\n    var linkDiffs = this._ldaDiffer.diff(this.linkDataArray);\r\n\r\n    if (this.skipsDiagramUpdate) return;\r\n\r\n    function compareObjs(obj1, obj2) {\r\n      // Loop through properties in object 1\r\n      for (const p in obj1) {\r\n        // Check property exists on both objects\r\n        if (obj1.hasOwnProperty(p) !== obj2.hasOwnProperty(p)) return false;\r\n\r\n        switch (typeof (obj1[p])) {\r\n          // Deep compare objects\r\n          case 'object':\r\n            if (!compareObjs(obj1[p], obj2[p])) return false;\r\n            break;\r\n          // Compare values\r\n          default:\r\n            if (obj1[p] !== obj2[p]) return false;\r\n        }\r\n      }\r\n\r\n      // Check object 2 for any extra properties\r\n      for (const p in obj2) {\r\n        if (typeof (obj1[p]) === 'undefined') return false;\r\n      }\r\n      return true;\r\n    }\r\n\r\n    var dc = this;\r\n    // merges changes from app data into GoJS model data, \r\n    // making sure only actual changes (and not falsely flagged no-ops on array / obj data props) are logged\r\n    function mergeChanges(kvchanges, str): boolean {\r\n      if (!dc.diagram || !dc.diagram.model) return;\r\n\r\n      if (kvchanges) {\r\n        kvchanges.forEachAddedItem((r: KeyValueChangeRecord<string, any>) => {\r\n          switch (str) {\r\n            case \"n\": {\r\n              dc.diagram.model.addNodeData(r.currentValue);\r\n              break;\r\n            }\r\n            case \"l\": {\r\n              var m = <go.GraphLinksModel>dc.diagram.model;\r\n              m.addLinkData(r.currentValue);\r\n              break;\r\n            }\r\n          }\r\n        });\r\n        kvchanges.forEachRemovedItem((r: KeyValueChangeRecord<string, any>) => {\r\n          switch (str) {\r\n            case \"n\": {\r\n              var node = dc.diagram.findNodesByExample(r.previousValue).first();\r\n              dc.diagram.remove(node);\r\n              break;\r\n            }\r\n            case \"l\": {\r\n              var link = dc.diagram.findLinksByExample(r.previousValue).first();\r\n              dc.diagram.remove(link);\r\n              break;\r\n            }\r\n          }\r\n        });\r\n\r\n        kvchanges.forEachChangedItem((r: KeyValueChangeRecord<string, any>) => {\r\n          const curVal = r.currentValue;\r\n          const pVal = r.previousValue;\r\n          \r\n          // ensure \"changes\" to array / object / enumerable data properties are legit\r\n          const sameVals = compareObjs(curVal, pVal);\r\n          if (!sameVals) {\r\n            switch (str) {\r\n              case \"n\": {\r\n                var node = dc.diagram.findNodesByExample(r.previousValue).first();\r\n                dc.diagram.model.assignAllDataProperties(node.data, r.currentValue);\r\n                break;\r\n              }\r\n              case \"l\": {\r\n                var link = dc.diagram.findLinksByExample(r.previousValue).first();\r\n                dc.diagram.model.assignAllDataProperties(link.data, r.currentValue);\r\n                break;\r\n              }\r\n            }\r\n          }\r\n          \r\n        });\r\n      }\r\n      \r\n    }\r\n\r\n    // don't need model change listener while performing known data updates\r\n    if (this.modelChangedListener !== null) this.diagram.model.removeChangedListener(this.modelChangedListener);\r\n\r\n    this.diagram.model.startTransaction('update data');\r\n    // var nodeDiffs = this._ndaDiffer.diff(this.nodeDataArray);\r\n    mergeChanges(nodeDiffs, \"n\");\r\n    mergeChanges(linkDiffs, \"l\");\r\n    this.diagram.model.assignAllDataProperties(this.diagram.model.modelData, this.modelData);\r\n    this.diagram.model.commitTransaction('update data');\r\n    // reset the model change listener\r\n    if (this.modelChangedListener !== null) this.diagram.model.addChangedListener(this.modelChangedListener);\r\n\r\n  } // end ngDoCheck\r\n\r\n  /**\r\n   * Some input property has changed (or its contents changed) in parent component.\r\n   * Update diagram data accordingly\r\n   */\r\n  // public updateFromAppData() {\r\n  //   if (!this.diagram) return;\r\n  //   const model = this.diagram.model;\r\n\r\n  //   // don't need model change listener while performing known data updates\r\n  //   if (this.modelChangedListener !== null) model.removeChangedListener(this.modelChangedListener);\r\n\r\n  //   model.startTransaction('update data');\r\n  //   model.mergeNodeDataArray(model.cloneDeep(this.nodeDataArray));\r\n  //   if (this.linkDataArray && model instanceof go.GraphLinksModel) {\r\n  //     model.mergeLinkDataArray(model.cloneDeep(this.linkDataArray));\r\n  //   }\r\n  //   if (this.modelData) {\r\n  //     model.assignAllDataProperties(model.modelData, this.modelData);\r\n  //   }\r\n  //   model.commitTransaction('update data');\r\n\r\n  //   // reset the model change listener\r\n  //   if (this.modelChangedListener !== null) model.addChangedListener(this.modelChangedListener);\r\n\r\n  // }\r\n\r\n}\r\n","import { Component, ElementRef, EventEmitter, Input, IterableDiffers, KeyValueDiffer, KeyValueDiffers, NgZone, Output, ViewChild } from '@angular/core';\r\nimport * as go from 'gojs';\r\n@Component({\r\n  selector: 'gojs-palette',\r\n  template: '<div #ngPalette [className]=divClassName></div>'\r\n})\r\nexport class PaletteComponent {\r\n\r\n  /**\r\n   * Palette initialization function. Returns a go.Palette.\r\n   * Do not initialize model data in this function.\r\n   */\r\n  @Input() public initPalette: () => go.Palette;\r\n\r\n  // Node data for palette\r\n  @Input() public nodeDataArray: Array<go.ObjectData>;\r\n\r\n  // Link data for palette. Optional\r\n  @Input() public linkDataArray: Array<go.ObjectData> = null;\r\n\r\n  // Model data for palette. Optional\r\n  @Input() public modelData: go.ObjectData = null;\r\n\r\n  // Palette div class name. Use this name to style your palette in CSS\r\n  @Input() public divClassName: string;\r\n\r\n  // model changed listener function for palette\r\n  @Input() public modelChangedListener: (e: go.ChangedEvent) => void | null = null;\r\n\r\n  // event emitter -- fires when palette model changes. Capture this emitted event in parent component\r\n  @Output() public modelChange: EventEmitter<go.IncrementalData> = new EventEmitter<go.IncrementalData>();\r\n\r\n  @ViewChild('ngPalette', { static: true }) public paletteDiv: ElementRef;\r\n\r\n  // The Palette itself\r\n  public palette: go.Palette | null = null;\r\n\r\n  // Differs for array Inputs (link / node data arrays)\r\n  public _ndaDiffer: any;\r\n  public _ldaDiffer: any;\r\n\r\n  // differ for modelData object\r\n  private _mdDiffer: KeyValueDiffer<string, any>;\r\n\r\n  constructor(private _differs: IterableDiffers, private _kvdiffers: KeyValueDiffers, public zone: NgZone) {\r\n    // differs used to check if there have been changed to the array @Inputs\r\n    // without them, changes to the input arrays won't register in ngOnChanges,\r\n    // since the array reference itself may be the same\r\n    this._ndaDiffer = this._differs.find([]).create(null);\r\n    this._ldaDiffer = this._differs.find([]).create(null);\r\n\r\n    // also watch if model data changes; this differ must be initialized in ngOnInit\r\n  } // end constructor\r\n\r\n  public ngOnInit() {\r\n    // initialize the differ that listens for changes to modelData object\r\n    if (this.modelData) {\r\n      this._mdDiffer = this._kvdiffers.find(this.modelData).create();\r\n    }\r\n  } // end ngOnInit\r\n\r\n  /**\r\n   * Initialize Palette after view init\r\n   */\r\n  public ngAfterViewInit() {\r\n    if (!this.paletteDiv) return;\r\n\r\n    this.palette = this.initPalette();\r\n\r\n    // This bit of code makes sure the mousemove event listeners on the canvas are run outside NgZone\r\n    // This makes it so change detection isn't triggered every time the mouse is moved inside the canvas, greatly improving performance\r\n    // If some state-altering behavior must happen on a mousemove event inside the palette,\r\n    // you will have to using zone.run() to make sure that event triggers angular change detection\r\n    this.palette.addEventListener = (DOMElement: Element | Window | Document, name: string, listener: any, capture: boolean) => {\r\n      const superAddEventListener = go.Diagram.prototype.addEventListener;\r\n      if (name === 'mousemove') {\r\n        this.zone.runOutsideAngular(() => superAddEventListener.call(this, DOMElement, name, listener, capture));\r\n      } else {\r\n        this.zone.run(() => {\r\n          superAddEventListener.call(this, DOMElement, name, listener, capture);\r\n        });\r\n      }\r\n    };\r\n\r\n    // assign the Palette's div, which (among many other things) will attach a bunch of listeners to the canvas,\r\n    // using the overridden addEventListener function above\r\n    const divRef = this.paletteDiv.nativeElement;\r\n    this.palette.div = divRef;\r\n\r\n    // initialize palette model\r\n    this.palette.delayInitialization(() => {\r\n      const model = this.palette.model;\r\n      model.commit((m: go.Model) => {\r\n        m.mergeNodeDataArray(m.cloneDeep(this.nodeDataArray));\r\n        if (this.linkDataArray && m instanceof go.GraphLinksModel) {\r\n          m.mergeLinkDataArray(m.cloneDeep(this.linkDataArray));\r\n        }\r\n        if (this.modelData) {\r\n          m.assignAllDataProperties(m.modelData, this.modelData);\r\n        }\r\n      }, null);\r\n    });\r\n\r\n\r\n    // initializer listener\r\n    this.modelChangedListener = (e: go.ChangedEvent) => {\r\n      if (e.isTransactionFinished) {\r\n        // this must be done within a NgZone.run block, so changes are detected in the parent component\r\n        this.zone.run(() => {\r\n          const dataChanges = e.model!.toIncrementalData(e);\r\n          this.modelChange.emit(dataChanges);\r\n        });\r\n      }\r\n    };\r\n    this.palette.addModelChangedListener(this.modelChangedListener);\r\n  } // end ngAfterViewInit\r\n\r\n  /**\r\n   * Always be checking if array Input data has changed (node and link data arrays)\r\n   */\r\n  public ngDoCheck() {\r\n    const nodeDataArrayChanges = this._ndaDiffer.diff(this.nodeDataArray);\r\n    const linkDataArrayChanges = this._ldaDiffer.diff(this.linkDataArray);\r\n    let modelDataChanges = null;\r\n    if (this._mdDiffer) {\r\n      modelDataChanges = this._mdDiffer.diff(this.modelData);\r\n    }\r\n    if (nodeDataArrayChanges || linkDataArrayChanges || modelDataChanges) {\r\n      this.updateFromAppData();\r\n    }\r\n  } // end ngDoCheck\r\n\r\n  /**\r\n   * Some input property has changed (or its contents changed) in parent component.\r\n   * Update palette data accordingly\r\n   */\r\n  public updateFromAppData() {\r\n    if (!this.palette) return;\r\n    const model = this.palette.model;\r\n\r\n    model.startTransaction('update data');\r\n    model.mergeNodeDataArray(model.cloneDeep(this.nodeDataArray));\r\n    if (this.linkDataArray && model instanceof go.GraphLinksModel) {\r\n      model.mergeLinkDataArray(model.cloneDeep(this.linkDataArray));\r\n    }\r\n    if (this.modelData) {\r\n      model.assignAllDataProperties(model.modelData, this.modelData);\r\n    }\r\n    model.commitTransaction('update data');\r\n\r\n  }\r\n\r\n}\r\n","import { Component, ElementRef, Input, NgZone, SimpleChanges, ViewChild } from '@angular/core';\r\nimport * as go from 'gojs';\r\n\r\n@Component({\r\n  selector: 'gojs-overview',\r\n  template: '<div #ngOverview [className]=divClassName></div>'\r\n})\r\nexport class OverviewComponent {\r\n\r\n  // The function used to initialize the Overview\r\n  @Input() public initOverview: () => go.Overview;\r\n\r\n  // Overview div class name. Use this name to style your Overview in CSS\r\n  @Input() public divClassName: string;\r\n\r\n  // The Diagram to observe with the Overview\r\n  @Input() public observedDiagram: go.Diagram = null;\r\n\r\n  @ViewChild('ngOverview', { static: true }) public overviewDiv: ElementRef;\r\n\r\n  // The Overview itself\r\n  public overview: go.Overview | null = null;\r\n\r\n  constructor(public zone: NgZone) { }\r\n\r\n  /**\r\n   * Initialize the overview\r\n   */\r\n  public ngAfterViewInit() {\r\n    if (!this.overviewDiv) return;\r\n    if (this.initOverview) {\r\n      this.overview = this.initOverview();\r\n    } else {\r\n      this.overview = new go.Overview();\r\n      this.overview.contentAlignment = go.Spot.Center;\r\n    }\r\n\r\n    // This bit of code makes sure the mousemove event listeners on the canvas are run outside NgZone\r\n    // This makes it so change detection isn't triggered every time the mouse is moved inside the canvas, greatly improving performance\r\n    // If some state-altering behavior must happen on a mousemove event inside the overview,\r\n    // you will have to using zone.run() to make sure that event triggers angular change detection\r\n    this.overview.addEventListener = (DOMElement: Element | Window | Document, name: string, listener: any, capture: boolean) => {\r\n      const superAddEventListener = go.Diagram.prototype.addEventListener;\r\n      if (name === 'mousemove') {\r\n        this.zone.runOutsideAngular(() => superAddEventListener.call(this, DOMElement, name, listener, capture));\r\n      } else {\r\n        this.zone.run(() => {\r\n          superAddEventListener.call(this, DOMElement, name, listener, capture);\r\n        });\r\n      }\r\n    };\r\n\r\n    this.overview.div = this.overviewDiv.nativeElement;\r\n  }\r\n\r\n  /**\r\n   * Only update when the observed diagram changes\r\n   * @param changes\r\n   */\r\n  public ngOnChanges(changes: SimpleChanges) {\r\n    if (!this.overview) return;\r\n    if (changes && changes.observedDiagram && changes.observedDiagram.currentValue !== changes.observedDiagram.previousValue) {\r\n      this.overview.observed = changes.observedDiagram.currentValue;\r\n    }\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { DiagramComponent } from './diagram.component';\r\nimport { OverviewComponent } from './overview.component';\r\nimport { PaletteComponent } from './palette.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    DiagramComponent,\r\n    OverviewComponent,\r\n    PaletteComponent\r\n  ],\r\n  imports: [\r\n  ],\r\n  exports: [\r\n    DiagramComponent,\r\n    OverviewComponent,\r\n    PaletteComponent\r\n  ]\r\n})\r\nexport class GojsAngularModule { }\r\n","import { Injectable } from '@angular/core';\r\nimport * as go from 'gojs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DataSyncService {\r\n\r\n  constructor() { }\r\n\r\n  /**\r\n   * Sync a node data array with a set of changes\r\n   * @param changes The set of changes to the GoJS model\r\n   * @param nodeData The node data array to merge these changes with\r\n   * @returns A node data array, merged with the changes\r\n   */\r\n  public static syncNodeData(changes: go.IncrementalData, nodeData: Array<go.ObjectData>) {\r\n    if (!changes) return nodeData;\r\n    if (!changes.modifiedNodeData && !changes.insertedNodeKeys && !changes.removedNodeKeys) return nodeData;\r\n\r\n    // maintain a map of modified nodes for fast lookup during insertion\r\n    const modifiedNodesMap = new go.Map<go.Key, go.ObjectData>();\r\n\r\n    // account for modified node data\r\n    if (changes.modifiedNodeData) {\r\n      changes.modifiedNodeData.forEach((nd: go.ObjectData) => {\r\n        modifiedNodesMap.set(nd.key, nd);\r\n        const key = nd.key;\r\n        for (let i = 0; i < nodeData.length; i++) {\r\n          const ndEntry = nodeData[i];\r\n          if (ndEntry.key === key) {\r\n            nodeData[i] = nd;\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    // account for inserted node data\r\n    if (changes.insertedNodeKeys) {\r\n      changes.insertedNodeKeys.forEach((key: go.Key) => {\r\n        const nd = modifiedNodesMap.get(key);\r\n        if (nd) {\r\n          nodeData.push(nd);\r\n        }\r\n      });\r\n    }\r\n\r\n    // account for removed node data\r\n    if (changes.removedNodeKeys) {\r\n      nodeData = nodeData.filter((nd: go.ObjectData) => {\r\n        if (changes.removedNodeKeys.includes(nd.key)) {\r\n          return false;\r\n        } return true;\r\n      });\r\n    }\r\n\r\n    return nodeData;\r\n  }\r\n\r\n  /**\r\n   * Sync a link data array with a set of changes\r\n   * @param changes The set of changes to the GoJS model\r\n   * @param linkData The link data array to merge these changes with\r\n   * @returns A link data array, merged with the changes\r\n   */\r\n  public static syncLinkData(changes: go.IncrementalData, linkData: Array<go.ObjectData>) {\r\n    if (!changes) return linkData;\r\n    if (!changes.modifiedLinkData && !changes.insertedLinkKeys && !changes.removedLinkKeys) return linkData;\r\n\r\n    // maintain a map of modified nodes for fast lookup during insertion\r\n    const modifiedLinksMap = new go.Map<go.Key, go.ObjectData>();\r\n\r\n    // account for modified link data\r\n    if (changes.modifiedLinkData) {\r\n      changes.modifiedLinkData.forEach((ld: go.ObjectData) => {\r\n        modifiedLinksMap.set(ld.key, ld);\r\n        const key = ld.key;\r\n        for (let i = 0; i < linkData.length; i++) {\r\n          const ldEntry = linkData[i];\r\n          if (ldEntry.key === key) {\r\n            linkData[i] = ld;\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    // account for inserted link data\r\n    if (changes.insertedLinkKeys) {\r\n      changes.insertedLinkKeys.forEach((key: go.Key) => {\r\n        const nd = modifiedLinksMap.get(key);\r\n        if (nd) {\r\n          linkData.push(nd);\r\n        }\r\n      });\r\n    }\r\n\r\n    // account for removed link data\r\n    if (changes.removedLinkKeys) {\r\n      linkData = linkData.filter((ld: go.ObjectData) => {\r\n        if (changes.removedLinkKeys.includes(ld.key)) {\r\n          return false;\r\n        } return true;\r\n      });\r\n    }\r\n\r\n    return linkData;\r\n  }\r\n\r\n  /**\r\n   * Sync modelData with a set of changes\r\n   * @param changes The set of changes to the GoJS model\r\n   * @param modelData The modelData to merge these changes with\r\n   * @returns A modelData object, merged with the changes\r\n   */\r\n  public static syncModelData(changes: go.IncrementalData, modelData: go.ObjectData) {\r\n    if (!changes) return modelData;\r\n    if (!changes.modelData) return modelData;\r\n    if (changes.modelData) {\r\n      return changes.modelData;\r\n    }\r\n  }\r\n\r\n\r\n}\r\n"]}