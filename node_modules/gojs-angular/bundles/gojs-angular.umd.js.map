{"version":3,"file":"gojs-angular.umd.js","sources":["../../../projects/gojs-angular/src/lib/diagram.component.ts","../../../projects/gojs-angular/src/lib/palette.component.ts","../../../projects/gojs-angular/src/lib/overview.component.ts","../../../projects/gojs-angular/src/lib/gojs-angular.module.ts","../../../projects/gojs-angular/src/lib/data-sync.service.ts"],"sourcesContent":["import { Component, ElementRef, EventEmitter, Input, IterableDiffers, IterableDiffer, KeyValueDiffer, KeyValueDiffers, NgZone, Output, ViewChild, KeyValueChangeRecord } from '@angular/core';\r\nimport * as go from 'gojs';\r\nimport { dashCaseToCamelCase } from '@angular/compiler/src/util';\r\n\r\n@Component({\r\n  selector: 'gojs-diagram',\r\n  template: '<div #ngDiagram [className]=divClassName></div>'\r\n})\r\nexport class DiagramComponent {\r\n\r\n  /**\r\n   * Diagram initialization function. Returns a go.Diagram.\r\n   * Do not initialize model data in this function.\r\n   */\r\n  @Input() public initDiagram: () => go.Diagram;\r\n\r\n  // Node data for diagram\r\n  @Input() public nodeDataArray: Array<go.ObjectData>;\r\n\r\n  // Link data for diagram\r\n  @Input() public linkDataArray: Array<go.ObjectData> = null; // optional\r\n\r\n  // Model data for diagram\r\n  @Input() public modelData: go.ObjectData = null; // optional\r\n\r\n  // Diagram div class name. Use this name to style your diagram in CSS\r\n  @Input() public divClassName: string;\r\n\r\n  // model changed listener function for diagram\r\n  @Input() public modelChangedListener: (e: go.ChangedEvent) => void | null = null;\r\n\r\n  @Input()\r\n  public skipsDiagramUpdate: boolean = false;\r\n\r\n  // event emitter -- fires when diagram model changes. Capture this emitted event in parent component\r\n  @Output() public modelChange: EventEmitter<go.IncrementalData> = new EventEmitter<go.IncrementalData>();\r\n\r\n  @ViewChild('ngDiagram', { static: true }) public diagramDiv: ElementRef;\r\n  public diagram: go.Diagram = null;\r\n\r\n  // differs for array inputs (node / link data arrays)\r\n  private _ndaDiffer: KeyValueDiffer<string, any>;\r\n  private _ldaDiffer: KeyValueDiffer<string, any>;\r\n  // differ for modelData object\r\n  private _mdDiffer: KeyValueDiffer<string, any>;\r\n\r\n\r\n  constructor(private _differs: IterableDiffers, private _kvdiffers: KeyValueDiffers, public zone: NgZone) {\r\n    // differs used to check if there have been changed to the array @Inputs\r\n    // without them, changes to the input arrays won't register in ngOnChanges,\r\n    // since the array reference itself may be the same\r\n    this._ndaDiffer = this._kvdiffers.find([]).create();\r\n    this._ldaDiffer = this._kvdiffers.find([]).create();\r\n\r\n    // also watch if model data changes; this differ must be initialized in ngOnInit\r\n  }\r\n\r\n  public ngOnInit() {\r\n    // initialize the differ that listens for changes to modelData object\r\n    if (this.modelData) {\r\n      this._mdDiffer = this._kvdiffers.find(this.modelData).create();\r\n    }\r\n  } // end ngOnInit\r\n\r\n  /**\r\n   * Initializes diagram / model after view init\r\n   */\r\n  public ngAfterViewInit() {\r\n    this.diagram = this.initDiagram();\r\n\r\n    // This bit of code makes sure the mousemove event listeners on the canvas are run outside NgZone\r\n    // This makes it so change detection isn't triggered every time the mouse is moved inside the canvas, greatly improving performance\r\n    // If some state-altering behavior must happen on a mousemove event inside the diagram,\r\n    // you will have to using zone.run() to make sure that event triggers angular change detection\r\n    this.diagram.addEventListener = (DOMElement: Element | Window | Document, name: string, listener: any, capture: boolean) => {\r\n      const superAddEventListener = go.Diagram.prototype.addEventListener;\r\n      if (name === 'mousemove') {\r\n        this.zone.runOutsideAngular(() => superAddEventListener.call(this, DOMElement, name, listener, capture));\r\n      } else {\r\n        this.zone.run(() => {\r\n          superAddEventListener.call(this, DOMElement, name, listener, capture);\r\n        });\r\n      }\r\n    };\r\n\r\n    // assign the Diagram's div, which (among many other things) will attach a bunch of listeners to the canvas,\r\n    // using the overridden addEventListener function above\r\n    const divRef = this.diagramDiv.nativeElement;\r\n    if (divRef === null) return;\r\n    this.diagram.div = divRef;\r\n\r\n    // initialize the Diagram's model\r\n    this.diagram.delayInitialization(() => {\r\n      const model = this.diagram.model;\r\n      model.commit((m: go.Model) => {\r\n        m.mergeNodeDataArray(m.cloneDeep(this.nodeDataArray));\r\n        if (this.linkDataArray && m instanceof go.GraphLinksModel) {\r\n          m.mergeLinkDataArray(m.cloneDeep(this.linkDataArray));\r\n        }\r\n        if (this.modelData) {\r\n          m.assignAllDataProperties(m.modelData, this.modelData);\r\n        }\r\n      }, null);\r\n    });\r\n\r\n    // initializer listener\r\n    this.modelChangedListener = (e: go.ChangedEvent) => {\r\n      if (e.isTransactionFinished) {\r\n        // this must be done within a NgZone.run block, so changes are detected in the parent component\r\n        this.zone.run(() => {\r\n          const dataChanges = e.model!.toIncrementalData(e);\r\n          this.modelChange.emit(dataChanges);\r\n        });\r\n      }\r\n    };\r\n    this.diagram.addModelChangedListener(this.modelChangedListener);\r\n\r\n  } // end ngAfterViewInit\r\n\r\n\r\n\r\n  /**\r\n   * Always be checking if array Input data has changed (node and link data arrays)\r\n   */\r\n  public ngDoCheck() {\r\n\r\n\r\n    \r\n    \r\n    if (!this.diagram) return;\r\n    if (!this.diagram.model) return;\r\n\r\n    // these need to be run each check, even if no merging happens\r\n    // otherwise, they will detect all diffs that happened since last time skipsDiagram was false,\r\n    // such as remove ops that happened in GoJS when skipsDiagram = true, \r\n    // and then realllllly bad stuff happens (deleting random nodes, updating the wrong Parts)\r\n    // Angular differs are a lot of fun\r\n    var nodeDiffs = this._ndaDiffer.diff(this.nodeDataArray);\r\n    var linkDiffs = this._ldaDiffer.diff(this.linkDataArray);\r\n\r\n    if (this.skipsDiagramUpdate) return;\r\n\r\n    function compareObjs(obj1, obj2) {\r\n      // Loop through properties in object 1\r\n      for (const p in obj1) {\r\n        // Check property exists on both objects\r\n        if (obj1.hasOwnProperty(p) !== obj2.hasOwnProperty(p)) return false;\r\n\r\n        switch (typeof (obj1[p])) {\r\n          // Deep compare objects\r\n          case 'object':\r\n            if (!compareObjs(obj1[p], obj2[p])) return false;\r\n            break;\r\n          // Compare values\r\n          default:\r\n            if (obj1[p] !== obj2[p]) return false;\r\n        }\r\n      }\r\n\r\n      // Check object 2 for any extra properties\r\n      for (const p in obj2) {\r\n        if (typeof (obj1[p]) === 'undefined') return false;\r\n      }\r\n      return true;\r\n    }\r\n\r\n    var dc = this;\r\n    // merges changes from app data into GoJS model data, \r\n    // making sure only actual changes (and not falsely flagged no-ops on array / obj data props) are logged\r\n    function mergeChanges(kvchanges, str): boolean {\r\n      if (!dc.diagram || !dc.diagram.model) return;\r\n\r\n      if (kvchanges) {\r\n        kvchanges.forEachAddedItem((r: KeyValueChangeRecord<string, any>) => {\r\n          switch (str) {\r\n            case \"n\": {\r\n              dc.diagram.model.addNodeData(r.currentValue);\r\n              break;\r\n            }\r\n            case \"l\": {\r\n              var m = <go.GraphLinksModel>dc.diagram.model;\r\n              m.addLinkData(r.currentValue);\r\n              break;\r\n            }\r\n          }\r\n        });\r\n        kvchanges.forEachRemovedItem((r: KeyValueChangeRecord<string, any>) => {\r\n          switch (str) {\r\n            case \"n\": {\r\n              var node = dc.diagram.findNodesByExample(r.previousValue).first();\r\n              dc.diagram.remove(node);\r\n              break;\r\n            }\r\n            case \"l\": {\r\n              var link = dc.diagram.findLinksByExample(r.previousValue).first();\r\n              dc.diagram.remove(link);\r\n              break;\r\n            }\r\n          }\r\n        });\r\n\r\n        kvchanges.forEachChangedItem((r: KeyValueChangeRecord<string, any>) => {\r\n          const curVal = r.currentValue;\r\n          const pVal = r.previousValue;\r\n          \r\n          // ensure \"changes\" to array / object / enumerable data properties are legit\r\n          const sameVals = compareObjs(curVal, pVal);\r\n          if (!sameVals) {\r\n            switch (str) {\r\n              case \"n\": {\r\n                var node = dc.diagram.findNodesByExample(r.previousValue).first();\r\n                dc.diagram.model.assignAllDataProperties(node.data, r.currentValue);\r\n                break;\r\n              }\r\n              case \"l\": {\r\n                var link = dc.diagram.findLinksByExample(r.previousValue).first();\r\n                dc.diagram.model.assignAllDataProperties(link.data, r.currentValue);\r\n                break;\r\n              }\r\n            }\r\n          }\r\n          \r\n        });\r\n      }\r\n      \r\n    }\r\n\r\n    // don't need model change listener while performing known data updates\r\n    if (this.modelChangedListener !== null) this.diagram.model.removeChangedListener(this.modelChangedListener);\r\n\r\n    this.diagram.model.startTransaction('update data');\r\n    // var nodeDiffs = this._ndaDiffer.diff(this.nodeDataArray);\r\n    mergeChanges(nodeDiffs, \"n\");\r\n    mergeChanges(linkDiffs, \"l\");\r\n    this.diagram.model.assignAllDataProperties(this.diagram.model.modelData, this.modelData);\r\n    this.diagram.model.commitTransaction('update data');\r\n    // reset the model change listener\r\n    if (this.modelChangedListener !== null) this.diagram.model.addChangedListener(this.modelChangedListener);\r\n\r\n  } // end ngDoCheck\r\n\r\n  /**\r\n   * Some input property has changed (or its contents changed) in parent component.\r\n   * Update diagram data accordingly\r\n   */\r\n  // public updateFromAppData() {\r\n  //   if (!this.diagram) return;\r\n  //   const model = this.diagram.model;\r\n\r\n  //   // don't need model change listener while performing known data updates\r\n  //   if (this.modelChangedListener !== null) model.removeChangedListener(this.modelChangedListener);\r\n\r\n  //   model.startTransaction('update data');\r\n  //   model.mergeNodeDataArray(model.cloneDeep(this.nodeDataArray));\r\n  //   if (this.linkDataArray && model instanceof go.GraphLinksModel) {\r\n  //     model.mergeLinkDataArray(model.cloneDeep(this.linkDataArray));\r\n  //   }\r\n  //   if (this.modelData) {\r\n  //     model.assignAllDataProperties(model.modelData, this.modelData);\r\n  //   }\r\n  //   model.commitTransaction('update data');\r\n\r\n  //   // reset the model change listener\r\n  //   if (this.modelChangedListener !== null) model.addChangedListener(this.modelChangedListener);\r\n\r\n  // }\r\n\r\n}\r\n","import { Component, ElementRef, EventEmitter, Input, IterableDiffers, KeyValueDiffer, KeyValueDiffers, NgZone, Output, ViewChild } from '@angular/core';\r\nimport * as go from 'gojs';\r\n@Component({\r\n  selector: 'gojs-palette',\r\n  template: '<div #ngPalette [className]=divClassName></div>'\r\n})\r\nexport class PaletteComponent {\r\n\r\n  /**\r\n   * Palette initialization function. Returns a go.Palette.\r\n   * Do not initialize model data in this function.\r\n   */\r\n  @Input() public initPalette: () => go.Palette;\r\n\r\n  // Node data for palette\r\n  @Input() public nodeDataArray: Array<go.ObjectData>;\r\n\r\n  // Link data for palette. Optional\r\n  @Input() public linkDataArray: Array<go.ObjectData> = null;\r\n\r\n  // Model data for palette. Optional\r\n  @Input() public modelData: go.ObjectData = null;\r\n\r\n  // Palette div class name. Use this name to style your palette in CSS\r\n  @Input() public divClassName: string;\r\n\r\n  // model changed listener function for palette\r\n  @Input() public modelChangedListener: (e: go.ChangedEvent) => void | null = null;\r\n\r\n  // event emitter -- fires when palette model changes. Capture this emitted event in parent component\r\n  @Output() public modelChange: EventEmitter<go.IncrementalData> = new EventEmitter<go.IncrementalData>();\r\n\r\n  @ViewChild('ngPalette', { static: true }) public paletteDiv: ElementRef;\r\n\r\n  // The Palette itself\r\n  public palette: go.Palette | null = null;\r\n\r\n  // Differs for array Inputs (link / node data arrays)\r\n  public _ndaDiffer: any;\r\n  public _ldaDiffer: any;\r\n\r\n  // differ for modelData object\r\n  private _mdDiffer: KeyValueDiffer<string, any>;\r\n\r\n  constructor(private _differs: IterableDiffers, private _kvdiffers: KeyValueDiffers, public zone: NgZone) {\r\n    // differs used to check if there have been changed to the array @Inputs\r\n    // without them, changes to the input arrays won't register in ngOnChanges,\r\n    // since the array reference itself may be the same\r\n    this._ndaDiffer = this._differs.find([]).create(null);\r\n    this._ldaDiffer = this._differs.find([]).create(null);\r\n\r\n    // also watch if model data changes; this differ must be initialized in ngOnInit\r\n  } // end constructor\r\n\r\n  public ngOnInit() {\r\n    // initialize the differ that listens for changes to modelData object\r\n    if (this.modelData) {\r\n      this._mdDiffer = this._kvdiffers.find(this.modelData).create();\r\n    }\r\n  } // end ngOnInit\r\n\r\n  /**\r\n   * Initialize Palette after view init\r\n   */\r\n  public ngAfterViewInit() {\r\n    if (!this.paletteDiv) return;\r\n\r\n    this.palette = this.initPalette();\r\n\r\n    // This bit of code makes sure the mousemove event listeners on the canvas are run outside NgZone\r\n    // This makes it so change detection isn't triggered every time the mouse is moved inside the canvas, greatly improving performance\r\n    // If some state-altering behavior must happen on a mousemove event inside the palette,\r\n    // you will have to using zone.run() to make sure that event triggers angular change detection\r\n    this.palette.addEventListener = (DOMElement: Element | Window | Document, name: string, listener: any, capture: boolean) => {\r\n      const superAddEventListener = go.Diagram.prototype.addEventListener;\r\n      if (name === 'mousemove') {\r\n        this.zone.runOutsideAngular(() => superAddEventListener.call(this, DOMElement, name, listener, capture));\r\n      } else {\r\n        this.zone.run(() => {\r\n          superAddEventListener.call(this, DOMElement, name, listener, capture);\r\n        });\r\n      }\r\n    };\r\n\r\n    // assign the Palette's div, which (among many other things) will attach a bunch of listeners to the canvas,\r\n    // using the overridden addEventListener function above\r\n    const divRef = this.paletteDiv.nativeElement;\r\n    this.palette.div = divRef;\r\n\r\n    // initialize palette model\r\n    this.palette.delayInitialization(() => {\r\n      const model = this.palette.model;\r\n      model.commit((m: go.Model) => {\r\n        m.mergeNodeDataArray(m.cloneDeep(this.nodeDataArray));\r\n        if (this.linkDataArray && m instanceof go.GraphLinksModel) {\r\n          m.mergeLinkDataArray(m.cloneDeep(this.linkDataArray));\r\n        }\r\n        if (this.modelData) {\r\n          m.assignAllDataProperties(m.modelData, this.modelData);\r\n        }\r\n      }, null);\r\n    });\r\n\r\n\r\n    // initializer listener\r\n    this.modelChangedListener = (e: go.ChangedEvent) => {\r\n      if (e.isTransactionFinished) {\r\n        // this must be done within a NgZone.run block, so changes are detected in the parent component\r\n        this.zone.run(() => {\r\n          const dataChanges = e.model!.toIncrementalData(e);\r\n          this.modelChange.emit(dataChanges);\r\n        });\r\n      }\r\n    };\r\n    this.palette.addModelChangedListener(this.modelChangedListener);\r\n  } // end ngAfterViewInit\r\n\r\n  /**\r\n   * Always be checking if array Input data has changed (node and link data arrays)\r\n   */\r\n  public ngDoCheck() {\r\n    const nodeDataArrayChanges = this._ndaDiffer.diff(this.nodeDataArray);\r\n    const linkDataArrayChanges = this._ldaDiffer.diff(this.linkDataArray);\r\n    let modelDataChanges = null;\r\n    if (this._mdDiffer) {\r\n      modelDataChanges = this._mdDiffer.diff(this.modelData);\r\n    }\r\n    if (nodeDataArrayChanges || linkDataArrayChanges || modelDataChanges) {\r\n      this.updateFromAppData();\r\n    }\r\n  } // end ngDoCheck\r\n\r\n  /**\r\n   * Some input property has changed (or its contents changed) in parent component.\r\n   * Update palette data accordingly\r\n   */\r\n  public updateFromAppData() {\r\n    if (!this.palette) return;\r\n    const model = this.palette.model;\r\n\r\n    model.startTransaction('update data');\r\n    model.mergeNodeDataArray(model.cloneDeep(this.nodeDataArray));\r\n    if (this.linkDataArray && model instanceof go.GraphLinksModel) {\r\n      model.mergeLinkDataArray(model.cloneDeep(this.linkDataArray));\r\n    }\r\n    if (this.modelData) {\r\n      model.assignAllDataProperties(model.modelData, this.modelData);\r\n    }\r\n    model.commitTransaction('update data');\r\n\r\n  }\r\n\r\n}\r\n","import { Component, ElementRef, Input, NgZone, SimpleChanges, ViewChild } from '@angular/core';\r\nimport * as go from 'gojs';\r\n\r\n@Component({\r\n  selector: 'gojs-overview',\r\n  template: '<div #ngOverview [className]=divClassName></div>'\r\n})\r\nexport class OverviewComponent {\r\n\r\n  // The function used to initialize the Overview\r\n  @Input() public initOverview: () => go.Overview;\r\n\r\n  // Overview div class name. Use this name to style your Overview in CSS\r\n  @Input() public divClassName: string;\r\n\r\n  // The Diagram to observe with the Overview\r\n  @Input() public observedDiagram: go.Diagram = null;\r\n\r\n  @ViewChild('ngOverview', { static: true }) public overviewDiv: ElementRef;\r\n\r\n  // The Overview itself\r\n  public overview: go.Overview | null = null;\r\n\r\n  constructor(public zone: NgZone) { }\r\n\r\n  /**\r\n   * Initialize the overview\r\n   */\r\n  public ngAfterViewInit() {\r\n    if (!this.overviewDiv) return;\r\n    if (this.initOverview) {\r\n      this.overview = this.initOverview();\r\n    } else {\r\n      this.overview = new go.Overview();\r\n      this.overview.contentAlignment = go.Spot.Center;\r\n    }\r\n\r\n    // This bit of code makes sure the mousemove event listeners on the canvas are run outside NgZone\r\n    // This makes it so change detection isn't triggered every time the mouse is moved inside the canvas, greatly improving performance\r\n    // If some state-altering behavior must happen on a mousemove event inside the overview,\r\n    // you will have to using zone.run() to make sure that event triggers angular change detection\r\n    this.overview.addEventListener = (DOMElement: Element | Window | Document, name: string, listener: any, capture: boolean) => {\r\n      const superAddEventListener = go.Diagram.prototype.addEventListener;\r\n      if (name === 'mousemove') {\r\n        this.zone.runOutsideAngular(() => superAddEventListener.call(this, DOMElement, name, listener, capture));\r\n      } else {\r\n        this.zone.run(() => {\r\n          superAddEventListener.call(this, DOMElement, name, listener, capture);\r\n        });\r\n      }\r\n    };\r\n\r\n    this.overview.div = this.overviewDiv.nativeElement;\r\n  }\r\n\r\n  /**\r\n   * Only update when the observed diagram changes\r\n   * @param changes\r\n   */\r\n  public ngOnChanges(changes: SimpleChanges) {\r\n    if (!this.overview) return;\r\n    if (changes && changes.observedDiagram && changes.observedDiagram.currentValue !== changes.observedDiagram.previousValue) {\r\n      this.overview.observed = changes.observedDiagram.currentValue;\r\n    }\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { DiagramComponent } from './diagram.component';\r\nimport { OverviewComponent } from './overview.component';\r\nimport { PaletteComponent } from './palette.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    DiagramComponent,\r\n    OverviewComponent,\r\n    PaletteComponent\r\n  ],\r\n  imports: [\r\n  ],\r\n  exports: [\r\n    DiagramComponent,\r\n    OverviewComponent,\r\n    PaletteComponent\r\n  ]\r\n})\r\nexport class GojsAngularModule { }\r\n","import { Injectable } from '@angular/core';\r\nimport * as go from 'gojs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DataSyncService {\r\n\r\n  constructor() { }\r\n\r\n  /**\r\n   * Sync a node data array with a set of changes\r\n   * @param changes The set of changes to the GoJS model\r\n   * @param nodeData The node data array to merge these changes with\r\n   * @returns A node data array, merged with the changes\r\n   */\r\n  public static syncNodeData(changes: go.IncrementalData, nodeData: Array<go.ObjectData>) {\r\n    if (!changes) return nodeData;\r\n    if (!changes.modifiedNodeData && !changes.insertedNodeKeys && !changes.removedNodeKeys) return nodeData;\r\n\r\n    // maintain a map of modified nodes for fast lookup during insertion\r\n    const modifiedNodesMap = new go.Map<go.Key, go.ObjectData>();\r\n\r\n    // account for modified node data\r\n    if (changes.modifiedNodeData) {\r\n      changes.modifiedNodeData.forEach((nd: go.ObjectData) => {\r\n        modifiedNodesMap.set(nd.key, nd);\r\n        const key = nd.key;\r\n        for (let i = 0; i < nodeData.length; i++) {\r\n          const ndEntry = nodeData[i];\r\n          if (ndEntry.key === key) {\r\n            nodeData[i] = nd;\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    // account for inserted node data\r\n    if (changes.insertedNodeKeys) {\r\n      changes.insertedNodeKeys.forEach((key: go.Key) => {\r\n        const nd = modifiedNodesMap.get(key);\r\n        if (nd) {\r\n          nodeData.push(nd);\r\n        }\r\n      });\r\n    }\r\n\r\n    // account for removed node data\r\n    if (changes.removedNodeKeys) {\r\n      nodeData = nodeData.filter((nd: go.ObjectData) => {\r\n        if (changes.removedNodeKeys.includes(nd.key)) {\r\n          return false;\r\n        } return true;\r\n      });\r\n    }\r\n\r\n    return nodeData;\r\n  }\r\n\r\n  /**\r\n   * Sync a link data array with a set of changes\r\n   * @param changes The set of changes to the GoJS model\r\n   * @param linkData The link data array to merge these changes with\r\n   * @returns A link data array, merged with the changes\r\n   */\r\n  public static syncLinkData(changes: go.IncrementalData, linkData: Array<go.ObjectData>) {\r\n    if (!changes) return linkData;\r\n    if (!changes.modifiedLinkData && !changes.insertedLinkKeys && !changes.removedLinkKeys) return linkData;\r\n\r\n    // maintain a map of modified nodes for fast lookup during insertion\r\n    const modifiedLinksMap = new go.Map<go.Key, go.ObjectData>();\r\n\r\n    // account for modified link data\r\n    if (changes.modifiedLinkData) {\r\n      changes.modifiedLinkData.forEach((ld: go.ObjectData) => {\r\n        modifiedLinksMap.set(ld.key, ld);\r\n        const key = ld.key;\r\n        for (let i = 0; i < linkData.length; i++) {\r\n          const ldEntry = linkData[i];\r\n          if (ldEntry.key === key) {\r\n            linkData[i] = ld;\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    // account for inserted link data\r\n    if (changes.insertedLinkKeys) {\r\n      changes.insertedLinkKeys.forEach((key: go.Key) => {\r\n        const nd = modifiedLinksMap.get(key);\r\n        if (nd) {\r\n          linkData.push(nd);\r\n        }\r\n      });\r\n    }\r\n\r\n    // account for removed link data\r\n    if (changes.removedLinkKeys) {\r\n      linkData = linkData.filter((ld: go.ObjectData) => {\r\n        if (changes.removedLinkKeys.includes(ld.key)) {\r\n          return false;\r\n        } return true;\r\n      });\r\n    }\r\n\r\n    return linkData;\r\n  }\r\n\r\n  /**\r\n   * Sync modelData with a set of changes\r\n   * @param changes The set of changes to the GoJS model\r\n   * @param modelData The modelData to merge these changes with\r\n   * @returns A modelData object, merged with the changes\r\n   */\r\n  public static syncModelData(changes: go.IncrementalData, modelData: go.ObjectData) {\r\n    if (!changes) return modelData;\r\n    if (!changes.modelData) return modelData;\r\n    if (changes.modelData) {\r\n      return changes.modelData;\r\n    }\r\n  }\r\n\r\n\r\n}\r\n"],"names":["EventEmitter","go.Diagram","go.GraphLinksModel","Component","IterableDiffers","KeyValueDiffers","NgZone","Input","Output","ViewChild","go.Overview","go.Spot","NgModule","go.Map","Injectable"],"mappings":"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"}