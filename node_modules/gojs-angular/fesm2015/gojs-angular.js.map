{"version":3,"file":"gojs-angular.js","sources":["../../../projects/gojs-angular/src/lib/diagram.component.ts","../../../projects/gojs-angular/src/lib/palette.component.ts","../../../projects/gojs-angular/src/lib/overview.component.ts","../../../projects/gojs-angular/src/lib/gojs-angular.module.ts","../../../projects/gojs-angular/src/lib/data-sync.service.ts"],"sourcesContent":["import { Component, ElementRef, EventEmitter, Input, IterableDiffers, IterableDiffer, KeyValueDiffer, KeyValueDiffers, NgZone, Output, ViewChild, KeyValueChangeRecord } from '@angular/core';\r\nimport * as go from 'gojs';\r\nimport { dashCaseToCamelCase } from '@angular/compiler/src/util';\r\n\r\n@Component({\r\n  selector: 'gojs-diagram',\r\n  template: '<div #ngDiagram [className]=divClassName></div>'\r\n})\r\nexport class DiagramComponent {\r\n\r\n  /**\r\n   * Diagram initialization function. Returns a go.Diagram.\r\n   * Do not initialize model data in this function.\r\n   */\r\n  @Input() public initDiagram: () => go.Diagram;\r\n\r\n  // Node data for diagram\r\n  @Input() public nodeDataArray: Array<go.ObjectData>;\r\n\r\n  // Link data for diagram\r\n  @Input() public linkDataArray: Array<go.ObjectData> = null; // optional\r\n\r\n  // Model data for diagram\r\n  @Input() public modelData: go.ObjectData = null; // optional\r\n\r\n  // Diagram div class name. Use this name to style your diagram in CSS\r\n  @Input() public divClassName: string;\r\n\r\n  // model changed listener function for diagram\r\n  @Input() public modelChangedListener: (e: go.ChangedEvent) => void | null = null;\r\n\r\n  @Input()\r\n  public skipsDiagramUpdate: boolean = false;\r\n\r\n  // event emitter -- fires when diagram model changes. Capture this emitted event in parent component\r\n  @Output() public modelChange: EventEmitter<go.IncrementalData> = new EventEmitter<go.IncrementalData>();\r\n\r\n  @ViewChild('ngDiagram', { static: true }) public diagramDiv: ElementRef;\r\n  public diagram: go.Diagram = null;\r\n\r\n  // differs for array inputs (node / link data arrays)\r\n  private _ndaDiffer: KeyValueDiffer<string, any>;\r\n  private _ldaDiffer: KeyValueDiffer<string, any>;\r\n  // differ for modelData object\r\n  private _mdDiffer: KeyValueDiffer<string, any>;\r\n\r\n\r\n  constructor(private _differs: IterableDiffers, private _kvdiffers: KeyValueDiffers, public zone: NgZone) {\r\n    // differs used to check if there have been changed to the array @Inputs\r\n    // without them, changes to the input arrays won't register in ngOnChanges,\r\n    // since the array reference itself may be the same\r\n    this._ndaDiffer = this._kvdiffers.find([]).create();\r\n    this._ldaDiffer = this._kvdiffers.find([]).create();\r\n\r\n    // also watch if model data changes; this differ must be initialized in ngOnInit\r\n  }\r\n\r\n  public ngOnInit() {\r\n    // initialize the differ that listens for changes to modelData object\r\n    if (this.modelData) {\r\n      this._mdDiffer = this._kvdiffers.find(this.modelData).create();\r\n    }\r\n  } // end ngOnInit\r\n\r\n  /**\r\n   * Initializes diagram / model after view init\r\n   */\r\n  public ngAfterViewInit() {\r\n    this.diagram = this.initDiagram();\r\n\r\n    // This bit of code makes sure the mousemove event listeners on the canvas are run outside NgZone\r\n    // This makes it so change detection isn't triggered every time the mouse is moved inside the canvas, greatly improving performance\r\n    // If some state-altering behavior must happen on a mousemove event inside the diagram,\r\n    // you will have to using zone.run() to make sure that event triggers angular change detection\r\n    this.diagram.addEventListener = (DOMElement: Element | Window | Document, name: string, listener: any, capture: boolean) => {\r\n      const superAddEventListener = go.Diagram.prototype.addEventListener;\r\n      if (name === 'mousemove') {\r\n        this.zone.runOutsideAngular(() => superAddEventListener.call(this, DOMElement, name, listener, capture));\r\n      } else {\r\n        this.zone.run(() => {\r\n          superAddEventListener.call(this, DOMElement, name, listener, capture);\r\n        });\r\n      }\r\n    };\r\n\r\n    // assign the Diagram's div, which (among many other things) will attach a bunch of listeners to the canvas,\r\n    // using the overridden addEventListener function above\r\n    const divRef = this.diagramDiv.nativeElement;\r\n    if (divRef === null) return;\r\n    this.diagram.div = divRef;\r\n\r\n    // initialize the Diagram's model\r\n    this.diagram.delayInitialization(() => {\r\n      const model = this.diagram.model;\r\n      model.commit((m: go.Model) => {\r\n        m.mergeNodeDataArray(m.cloneDeep(this.nodeDataArray));\r\n        if (this.linkDataArray && m instanceof go.GraphLinksModel) {\r\n          m.mergeLinkDataArray(m.cloneDeep(this.linkDataArray));\r\n        }\r\n        if (this.modelData) {\r\n          m.assignAllDataProperties(m.modelData, this.modelData);\r\n        }\r\n      }, null);\r\n    });\r\n\r\n    // initializer listener\r\n    this.modelChangedListener = (e: go.ChangedEvent) => {\r\n      if (e.isTransactionFinished) {\r\n        // this must be done within a NgZone.run block, so changes are detected in the parent component\r\n        this.zone.run(() => {\r\n          const dataChanges = e.model!.toIncrementalData(e);\r\n          this.modelChange.emit(dataChanges);\r\n        });\r\n      }\r\n    };\r\n    this.diagram.addModelChangedListener(this.modelChangedListener);\r\n\r\n  } // end ngAfterViewInit\r\n\r\n\r\n\r\n  /**\r\n   * Always be checking if array Input data has changed (node and link data arrays)\r\n   */\r\n  public ngDoCheck() {\r\n\r\n\r\n    \r\n    \r\n    if (!this.diagram) return;\r\n    if (!this.diagram.model) return;\r\n\r\n    // these need to be run each check, even if no merging happens\r\n    // otherwise, they will detect all diffs that happened since last time skipsDiagram was false,\r\n    // such as remove ops that happened in GoJS when skipsDiagram = true, \r\n    // and then realllllly bad stuff happens (deleting random nodes, updating the wrong Parts)\r\n    // Angular differs are a lot of fun\r\n    var nodeDiffs = this._ndaDiffer.diff(this.nodeDataArray);\r\n    var linkDiffs = this._ldaDiffer.diff(this.linkDataArray);\r\n\r\n    if (this.skipsDiagramUpdate) return;\r\n\r\n    function compareObjs(obj1, obj2) {\r\n      // Loop through properties in object 1\r\n      for (const p in obj1) {\r\n        // Check property exists on both objects\r\n        if (obj1.hasOwnProperty(p) !== obj2.hasOwnProperty(p)) return false;\r\n\r\n        switch (typeof (obj1[p])) {\r\n          // Deep compare objects\r\n          case 'object':\r\n            if (!compareObjs(obj1[p], obj2[p])) return false;\r\n            break;\r\n          // Compare values\r\n          default:\r\n            if (obj1[p] !== obj2[p]) return false;\r\n        }\r\n      }\r\n\r\n      // Check object 2 for any extra properties\r\n      for (const p in obj2) {\r\n        if (typeof (obj1[p]) === 'undefined') return false;\r\n      }\r\n      return true;\r\n    }\r\n\r\n    var dc = this;\r\n    // merges changes from app data into GoJS model data, \r\n    // making sure only actual changes (and not falsely flagged no-ops on array / obj data props) are logged\r\n    function mergeChanges(kvchanges, str): boolean {\r\n      if (!dc.diagram || !dc.diagram.model) return;\r\n\r\n      if (kvchanges) {\r\n        kvchanges.forEachAddedItem((r: KeyValueChangeRecord<string, any>) => {\r\n          switch (str) {\r\n            case \"n\": {\r\n              dc.diagram.model.addNodeData(r.currentValue);\r\n              break;\r\n            }\r\n            case \"l\": {\r\n              var m = <go.GraphLinksModel>dc.diagram.model;\r\n              m.addLinkData(r.currentValue);\r\n              break;\r\n            }\r\n          }\r\n        });\r\n        kvchanges.forEachRemovedItem((r: KeyValueChangeRecord<string, any>) => {\r\n          switch (str) {\r\n            case \"n\": {\r\n              var node = dc.diagram.findNodesByExample(r.previousValue).first();\r\n              dc.diagram.remove(node);\r\n              break;\r\n            }\r\n            case \"l\": {\r\n              var link = dc.diagram.findLinksByExample(r.previousValue).first();\r\n              dc.diagram.remove(link);\r\n              break;\r\n            }\r\n          }\r\n        });\r\n\r\n        kvchanges.forEachChangedItem((r: KeyValueChangeRecord<string, any>) => {\r\n          const curVal = r.currentValue;\r\n          const pVal = r.previousValue;\r\n          \r\n          // ensure \"changes\" to array / object / enumerable data properties are legit\r\n          const sameVals = compareObjs(curVal, pVal);\r\n          if (!sameVals) {\r\n            switch (str) {\r\n              case \"n\": {\r\n                var node = dc.diagram.findNodesByExample(r.previousValue).first();\r\n                dc.diagram.model.assignAllDataProperties(node.data, r.currentValue);\r\n                break;\r\n              }\r\n              case \"l\": {\r\n                var link = dc.diagram.findLinksByExample(r.previousValue).first();\r\n                dc.diagram.model.assignAllDataProperties(link.data, r.currentValue);\r\n                break;\r\n              }\r\n            }\r\n          }\r\n          \r\n        });\r\n      }\r\n      \r\n    }\r\n\r\n    // don't need model change listener while performing known data updates\r\n    if (this.modelChangedListener !== null) this.diagram.model.removeChangedListener(this.modelChangedListener);\r\n\r\n    this.diagram.model.startTransaction('update data');\r\n    // var nodeDiffs = this._ndaDiffer.diff(this.nodeDataArray);\r\n    mergeChanges(nodeDiffs, \"n\");\r\n    mergeChanges(linkDiffs, \"l\");\r\n    this.diagram.model.assignAllDataProperties(this.diagram.model.modelData, this.modelData);\r\n    this.diagram.model.commitTransaction('update data');\r\n    // reset the model change listener\r\n    if (this.modelChangedListener !== null) this.diagram.model.addChangedListener(this.modelChangedListener);\r\n\r\n  } // end ngDoCheck\r\n\r\n  /**\r\n   * Some input property has changed (or its contents changed) in parent component.\r\n   * Update diagram data accordingly\r\n   */\r\n  // public updateFromAppData() {\r\n  //   if (!this.diagram) return;\r\n  //   const model = this.diagram.model;\r\n\r\n  //   // don't need model change listener while performing known data updates\r\n  //   if (this.modelChangedListener !== null) model.removeChangedListener(this.modelChangedListener);\r\n\r\n  //   model.startTransaction('update data');\r\n  //   model.mergeNodeDataArray(model.cloneDeep(this.nodeDataArray));\r\n  //   if (this.linkDataArray && model instanceof go.GraphLinksModel) {\r\n  //     model.mergeLinkDataArray(model.cloneDeep(this.linkDataArray));\r\n  //   }\r\n  //   if (this.modelData) {\r\n  //     model.assignAllDataProperties(model.modelData, this.modelData);\r\n  //   }\r\n  //   model.commitTransaction('update data');\r\n\r\n  //   // reset the model change listener\r\n  //   if (this.modelChangedListener !== null) model.addChangedListener(this.modelChangedListener);\r\n\r\n  // }\r\n\r\n}\r\n","import { Component, ElementRef, EventEmitter, Input, IterableDiffers, KeyValueDiffer, KeyValueDiffers, NgZone, Output, ViewChild } from '@angular/core';\r\nimport * as go from 'gojs';\r\n@Component({\r\n  selector: 'gojs-palette',\r\n  template: '<div #ngPalette [className]=divClassName></div>'\r\n})\r\nexport class PaletteComponent {\r\n\r\n  /**\r\n   * Palette initialization function. Returns a go.Palette.\r\n   * Do not initialize model data in this function.\r\n   */\r\n  @Input() public initPalette: () => go.Palette;\r\n\r\n  // Node data for palette\r\n  @Input() public nodeDataArray: Array<go.ObjectData>;\r\n\r\n  // Link data for palette. Optional\r\n  @Input() public linkDataArray: Array<go.ObjectData> = null;\r\n\r\n  // Model data for palette. Optional\r\n  @Input() public modelData: go.ObjectData = null;\r\n\r\n  // Palette div class name. Use this name to style your palette in CSS\r\n  @Input() public divClassName: string;\r\n\r\n  // model changed listener function for palette\r\n  @Input() public modelChangedListener: (e: go.ChangedEvent) => void | null = null;\r\n\r\n  // event emitter -- fires when palette model changes. Capture this emitted event in parent component\r\n  @Output() public modelChange: EventEmitter<go.IncrementalData> = new EventEmitter<go.IncrementalData>();\r\n\r\n  @ViewChild('ngPalette', { static: true }) public paletteDiv: ElementRef;\r\n\r\n  // The Palette itself\r\n  public palette: go.Palette | null = null;\r\n\r\n  // Differs for array Inputs (link / node data arrays)\r\n  public _ndaDiffer: any;\r\n  public _ldaDiffer: any;\r\n\r\n  // differ for modelData object\r\n  private _mdDiffer: KeyValueDiffer<string, any>;\r\n\r\n  constructor(private _differs: IterableDiffers, private _kvdiffers: KeyValueDiffers, public zone: NgZone) {\r\n    // differs used to check if there have been changed to the array @Inputs\r\n    // without them, changes to the input arrays won't register in ngOnChanges,\r\n    // since the array reference itself may be the same\r\n    this._ndaDiffer = this._differs.find([]).create(null);\r\n    this._ldaDiffer = this._differs.find([]).create(null);\r\n\r\n    // also watch if model data changes; this differ must be initialized in ngOnInit\r\n  } // end constructor\r\n\r\n  public ngOnInit() {\r\n    // initialize the differ that listens for changes to modelData object\r\n    if (this.modelData) {\r\n      this._mdDiffer = this._kvdiffers.find(this.modelData).create();\r\n    }\r\n  } // end ngOnInit\r\n\r\n  /**\r\n   * Initialize Palette after view init\r\n   */\r\n  public ngAfterViewInit() {\r\n    if (!this.paletteDiv) return;\r\n\r\n    this.palette = this.initPalette();\r\n\r\n    // This bit of code makes sure the mousemove event listeners on the canvas are run outside NgZone\r\n    // This makes it so change detection isn't triggered every time the mouse is moved inside the canvas, greatly improving performance\r\n    // If some state-altering behavior must happen on a mousemove event inside the palette,\r\n    // you will have to using zone.run() to make sure that event triggers angular change detection\r\n    this.palette.addEventListener = (DOMElement: Element | Window | Document, name: string, listener: any, capture: boolean) => {\r\n      const superAddEventListener = go.Diagram.prototype.addEventListener;\r\n      if (name === 'mousemove') {\r\n        this.zone.runOutsideAngular(() => superAddEventListener.call(this, DOMElement, name, listener, capture));\r\n      } else {\r\n        this.zone.run(() => {\r\n          superAddEventListener.call(this, DOMElement, name, listener, capture);\r\n        });\r\n      }\r\n    };\r\n\r\n    // assign the Palette's div, which (among many other things) will attach a bunch of listeners to the canvas,\r\n    // using the overridden addEventListener function above\r\n    const divRef = this.paletteDiv.nativeElement;\r\n    this.palette.div = divRef;\r\n\r\n    // initialize palette model\r\n    this.palette.delayInitialization(() => {\r\n      const model = this.palette.model;\r\n      model.commit((m: go.Model) => {\r\n        m.mergeNodeDataArray(m.cloneDeep(this.nodeDataArray));\r\n        if (this.linkDataArray && m instanceof go.GraphLinksModel) {\r\n          m.mergeLinkDataArray(m.cloneDeep(this.linkDataArray));\r\n        }\r\n        if (this.modelData) {\r\n          m.assignAllDataProperties(m.modelData, this.modelData);\r\n        }\r\n      }, null);\r\n    });\r\n\r\n\r\n    // initializer listener\r\n    this.modelChangedListener = (e: go.ChangedEvent) => {\r\n      if (e.isTransactionFinished) {\r\n        // this must be done within a NgZone.run block, so changes are detected in the parent component\r\n        this.zone.run(() => {\r\n          const dataChanges = e.model!.toIncrementalData(e);\r\n          this.modelChange.emit(dataChanges);\r\n        });\r\n      }\r\n    };\r\n    this.palette.addModelChangedListener(this.modelChangedListener);\r\n  } // end ngAfterViewInit\r\n\r\n  /**\r\n   * Always be checking if array Input data has changed (node and link data arrays)\r\n   */\r\n  public ngDoCheck() {\r\n    const nodeDataArrayChanges = this._ndaDiffer.diff(this.nodeDataArray);\r\n    const linkDataArrayChanges = this._ldaDiffer.diff(this.linkDataArray);\r\n    let modelDataChanges = null;\r\n    if (this._mdDiffer) {\r\n      modelDataChanges = this._mdDiffer.diff(this.modelData);\r\n    }\r\n    if (nodeDataArrayChanges || linkDataArrayChanges || modelDataChanges) {\r\n      this.updateFromAppData();\r\n    }\r\n  } // end ngDoCheck\r\n\r\n  /**\r\n   * Some input property has changed (or its contents changed) in parent component.\r\n   * Update palette data accordingly\r\n   */\r\n  public updateFromAppData() {\r\n    if (!this.palette) return;\r\n    const model = this.palette.model;\r\n\r\n    model.startTransaction('update data');\r\n    model.mergeNodeDataArray(model.cloneDeep(this.nodeDataArray));\r\n    if (this.linkDataArray && model instanceof go.GraphLinksModel) {\r\n      model.mergeLinkDataArray(model.cloneDeep(this.linkDataArray));\r\n    }\r\n    if (this.modelData) {\r\n      model.assignAllDataProperties(model.modelData, this.modelData);\r\n    }\r\n    model.commitTransaction('update data');\r\n\r\n  }\r\n\r\n}\r\n","import { Component, ElementRef, Input, NgZone, SimpleChanges, ViewChild } from '@angular/core';\r\nimport * as go from 'gojs';\r\n\r\n@Component({\r\n  selector: 'gojs-overview',\r\n  template: '<div #ngOverview [className]=divClassName></div>'\r\n})\r\nexport class OverviewComponent {\r\n\r\n  // The function used to initialize the Overview\r\n  @Input() public initOverview: () => go.Overview;\r\n\r\n  // Overview div class name. Use this name to style your Overview in CSS\r\n  @Input() public divClassName: string;\r\n\r\n  // The Diagram to observe with the Overview\r\n  @Input() public observedDiagram: go.Diagram = null;\r\n\r\n  @ViewChild('ngOverview', { static: true }) public overviewDiv: ElementRef;\r\n\r\n  // The Overview itself\r\n  public overview: go.Overview | null = null;\r\n\r\n  constructor(public zone: NgZone) { }\r\n\r\n  /**\r\n   * Initialize the overview\r\n   */\r\n  public ngAfterViewInit() {\r\n    if (!this.overviewDiv) return;\r\n    if (this.initOverview) {\r\n      this.overview = this.initOverview();\r\n    } else {\r\n      this.overview = new go.Overview();\r\n      this.overview.contentAlignment = go.Spot.Center;\r\n    }\r\n\r\n    // This bit of code makes sure the mousemove event listeners on the canvas are run outside NgZone\r\n    // This makes it so change detection isn't triggered every time the mouse is moved inside the canvas, greatly improving performance\r\n    // If some state-altering behavior must happen on a mousemove event inside the overview,\r\n    // you will have to using zone.run() to make sure that event triggers angular change detection\r\n    this.overview.addEventListener = (DOMElement: Element | Window | Document, name: string, listener: any, capture: boolean) => {\r\n      const superAddEventListener = go.Diagram.prototype.addEventListener;\r\n      if (name === 'mousemove') {\r\n        this.zone.runOutsideAngular(() => superAddEventListener.call(this, DOMElement, name, listener, capture));\r\n      } else {\r\n        this.zone.run(() => {\r\n          superAddEventListener.call(this, DOMElement, name, listener, capture);\r\n        });\r\n      }\r\n    };\r\n\r\n    this.overview.div = this.overviewDiv.nativeElement;\r\n  }\r\n\r\n  /**\r\n   * Only update when the observed diagram changes\r\n   * @param changes\r\n   */\r\n  public ngOnChanges(changes: SimpleChanges) {\r\n    if (!this.overview) return;\r\n    if (changes && changes.observedDiagram && changes.observedDiagram.currentValue !== changes.observedDiagram.previousValue) {\r\n      this.overview.observed = changes.observedDiagram.currentValue;\r\n    }\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { DiagramComponent } from './diagram.component';\r\nimport { OverviewComponent } from './overview.component';\r\nimport { PaletteComponent } from './palette.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    DiagramComponent,\r\n    OverviewComponent,\r\n    PaletteComponent\r\n  ],\r\n  imports: [\r\n  ],\r\n  exports: [\r\n    DiagramComponent,\r\n    OverviewComponent,\r\n    PaletteComponent\r\n  ]\r\n})\r\nexport class GojsAngularModule { }\r\n","import { Injectable } from '@angular/core';\r\nimport * as go from 'gojs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DataSyncService {\r\n\r\n  constructor() { }\r\n\r\n  /**\r\n   * Sync a node data array with a set of changes\r\n   * @param changes The set of changes to the GoJS model\r\n   * @param nodeData The node data array to merge these changes with\r\n   * @returns A node data array, merged with the changes\r\n   */\r\n  public static syncNodeData(changes: go.IncrementalData, nodeData: Array<go.ObjectData>) {\r\n    if (!changes) return nodeData;\r\n    if (!changes.modifiedNodeData && !changes.insertedNodeKeys && !changes.removedNodeKeys) return nodeData;\r\n\r\n    // maintain a map of modified nodes for fast lookup during insertion\r\n    const modifiedNodesMap = new go.Map<go.Key, go.ObjectData>();\r\n\r\n    // account for modified node data\r\n    if (changes.modifiedNodeData) {\r\n      changes.modifiedNodeData.forEach((nd: go.ObjectData) => {\r\n        modifiedNodesMap.set(nd.key, nd);\r\n        const key = nd.key;\r\n        for (let i = 0; i < nodeData.length; i++) {\r\n          const ndEntry = nodeData[i];\r\n          if (ndEntry.key === key) {\r\n            nodeData[i] = nd;\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    // account for inserted node data\r\n    if (changes.insertedNodeKeys) {\r\n      changes.insertedNodeKeys.forEach((key: go.Key) => {\r\n        const nd = modifiedNodesMap.get(key);\r\n        if (nd) {\r\n          nodeData.push(nd);\r\n        }\r\n      });\r\n    }\r\n\r\n    // account for removed node data\r\n    if (changes.removedNodeKeys) {\r\n      nodeData = nodeData.filter((nd: go.ObjectData) => {\r\n        if (changes.removedNodeKeys.includes(nd.key)) {\r\n          return false;\r\n        } return true;\r\n      });\r\n    }\r\n\r\n    return nodeData;\r\n  }\r\n\r\n  /**\r\n   * Sync a link data array with a set of changes\r\n   * @param changes The set of changes to the GoJS model\r\n   * @param linkData The link data array to merge these changes with\r\n   * @returns A link data array, merged with the changes\r\n   */\r\n  public static syncLinkData(changes: go.IncrementalData, linkData: Array<go.ObjectData>) {\r\n    if (!changes) return linkData;\r\n    if (!changes.modifiedLinkData && !changes.insertedLinkKeys && !changes.removedLinkKeys) return linkData;\r\n\r\n    // maintain a map of modified nodes for fast lookup during insertion\r\n    const modifiedLinksMap = new go.Map<go.Key, go.ObjectData>();\r\n\r\n    // account for modified link data\r\n    if (changes.modifiedLinkData) {\r\n      changes.modifiedLinkData.forEach((ld: go.ObjectData) => {\r\n        modifiedLinksMap.set(ld.key, ld);\r\n        const key = ld.key;\r\n        for (let i = 0; i < linkData.length; i++) {\r\n          const ldEntry = linkData[i];\r\n          if (ldEntry.key === key) {\r\n            linkData[i] = ld;\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    // account for inserted link data\r\n    if (changes.insertedLinkKeys) {\r\n      changes.insertedLinkKeys.forEach((key: go.Key) => {\r\n        const nd = modifiedLinksMap.get(key);\r\n        if (nd) {\r\n          linkData.push(nd);\r\n        }\r\n      });\r\n    }\r\n\r\n    // account for removed link data\r\n    if (changes.removedLinkKeys) {\r\n      linkData = linkData.filter((ld: go.ObjectData) => {\r\n        if (changes.removedLinkKeys.includes(ld.key)) {\r\n          return false;\r\n        } return true;\r\n      });\r\n    }\r\n\r\n    return linkData;\r\n  }\r\n\r\n  /**\r\n   * Sync modelData with a set of changes\r\n   * @param changes The set of changes to the GoJS model\r\n   * @param modelData The modelData to merge these changes with\r\n   * @returns A modelData object, merged with the changes\r\n   */\r\n  public static syncModelData(changes: go.IncrementalData, modelData: go.ObjectData) {\r\n    if (!changes) return modelData;\r\n    if (!changes.modelData) return modelData;\r\n    if (changes.modelData) {\r\n      return changes.modelData;\r\n    }\r\n  }\r\n\r\n\r\n}\r\n"],"names":["go.Diagram","go.GraphLinksModel","go.Overview","go.Spot","go.Map"],"mappings":"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"}